<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">


    <!--<context-param>-->
        <!--<param-name>contextConfigLocation</param-name>-->
        <!--<param-value>/WEB-INF/applicationContext.xml</param-value>-->
    <!--</context-param>-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:com/one/config/springAnnotation-*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!---->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:com/one/config/springAnnotation-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <!--<url-pattern>*.form</url-pattern>-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--12-28 实例四：将类似实例三生成的图片嵌入到JSP页面中去。 -->
    <servlet>
        <servlet-name>DisplayChart</servlet-name>
        <servlet-class>org.jfree.chart.servlet.DisplayChart</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DisplayChart</servlet-name>
        <url-pattern>/DisplayChart</url-pattern>
    </servlet-mapping>


    <!--3-19 java中生成二维码，并直接输出到jsp页面-->
    <servlet>
        <servlet-name>CodeService</servlet-name>
        <servlet-class>com.imooc.servlet.CodeServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CodeService</servlet-name>
        <url-pattern>/code.jsp</url-pattern>
    </servlet-mapping>

    <!--配置字符集-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置Session -->
    <filter>
        <filter-name>openSession</filter-name>
        <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>openSession</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

  <!--&lt;!&ndash;12-28 配置struts2&ndash;&gt;-->
    <!--<filter>-->
        <!--<filter-name>struts2</filter-name>-->
        <!--<filter-class>-->
            <!--org.apache.struts2.dispatcher.filter.StrutsExecuteFilter-->
        <!--</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>struts2</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--首页文件列表-->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>



<!--OpenSessionInViewFilter在web.xml中的配置
1.如果使用HibernateTemplate，默认Session在使用后会关闭，如果使用load延迟加载获得Proxy对象后，就无法在前台获取数据。
2.OpenSessionInViewFilter的作用是延长hibernate中Session的生命周期到页面，使用Proxy时获取数据。
3.使用OpenSessionInViewFilter只需在web.xml中作为一个Filter进行配置，OpenSessionInViewFilter的位置必须在Struts2过滤器前，否则无用
4. .....
-->